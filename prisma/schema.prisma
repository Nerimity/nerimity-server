generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model Account {
  @@map("accounts")
  
  id              String  @id
  email           String  @unique
  password        String
  passwordVersion Int     @default(1)
  userId          String  @unique
  user            User    @relation(fields: [userId], references: [id])
  suspendCount    Int     @default(0) // How many times the user has been suspended.
  warnCount       Int     @default(0) // How many times the user has been warned.
  warnExpiresAt   DateTime? // Reset when the user is warned after 6 months.
  postNotificationCount  Int                     @default(0)
  serverOrderIds   String[]
  dmStatus               Int                     @default(0)
  friendRequestStatus    Int                     @default(0)

  FCMTokens        FirebaseMessagingToken[]

  emailConfirmed  Boolean @default(false)
  emailConfirmCode String?


  // forgot password
  resetPasswordCode String?
  resetPasswordCodeExpiresAt DateTime?

  applications Application[]

  hideFollowers Boolean @default(false)
  hideFollowing Boolean @default(false)

  serverFolders ServerFolder[]

  @@index([userId])
}


model ServerFolder {
  @@map("server_folders")
  id String @id
  color String
  name String
  serverIds String[]

  accountId   String
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)


  createdAt DateTime @default(now())
}

model Application {
  @@map("applications")
  id          String   @id
  name        String
  description String?
  avatar      String?

  botUserId   String?  @unique
  botUser     User?    @relation(fields: [botUserId], references: [id], onDelete: Cascade)
  botTokenVersion Int  @default(1)



  creatorAccountId   String
  creatorAccount     Account  @relation(fields: [creatorAccountId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  botCommands BotCommand[]
}


// store all the ips that have been banned. it will also have an expire date
model BannedIp {
  @@map("banned_ips")
  id String @id
  ipAddress String @unique
  expireAt  DateTime
}

model FirebaseMessagingToken {
  @@map("fcm_tokens")
  token String @unique
  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  @@index([accountId])
}

model User {
  @@map("users")
  id                     String                  @id
  badges                 Int                     @default(0)
  username               String
  tag                    String
  avatar                 String?
  banner                 String?
  status                 Int
  customStatus           String?
  hexColor               String?
  bot                    Boolean?
  joinedAt               DateTime                @default(now())
  account                Account?
  channelsCreatedByMe    Channel[]
  recipientFriends       Friend[]                @relation("recipient_friends")
  friends                Friend[]                @relation("friends")
  inbox                  Inbox[]                 @relation("inbox")
  recipientInbox         Inbox[]                 @relation("recipient_inbox")
  messages               Message[]
  sendMessageMentions    MessageMention[]        @relation("sent_message_mentions")
  messageMentions        MessageMention[]        @relation("message_mentions")
  serversCreatedByMe     Server[]                @relation("server_creator")
  lastSeenServerChannels ServerChannelLastSeen[]
  createdServerInvites   ServerInvite[]
  memberInServers        ServerMember[]
  servers                Server[]
  createdServerRoles     ServerRole[]
  bannedServers          BannedServerMember[]
  customEmojis           CustomEmoji[]

  lastOnlineAt          DateTime?
  lastOnlineStatus       Int                     @default(0)


  reactedMessageEmojis   ReactedMessageUser[]

  notificationSettings UserNotificationSettings[] 


  posts                  Post[]
  likedPosts             PostLike[]
  followers              Follower[]
  following              Follower[]              @relation(name: "following")
  postNotifications      PostNotification[]      @relation(name: "postNotifications")
  sentPostNotifications  PostNotification[]
  mentionedMessages      Message[]               @relation(name: "mentioned_messages")

  mentionedPosts    Post[]  @relation(name: "mentioned_posts")

  profile                UserProfile?

  messageNotifications         MessageNotification[]
  suspension            Suspension?

  devices               UserDevice[]

  connections           UserConnection[]
  notice ChatNotice?

  modAuditLogs          ModAuditLog[]

  openedTickets         Ticket[]

  reminders             Reminder[]

  application           Application? // Bot users will have this

  usersSuspended      Suspension[]               @relation(name: "suspended_by") // Only admins


  notices UserNotice[]

  createdNotices UserNotice[] @relation(name: "created_notices")


  votedPostPolls PostPollVotedUser[]


  scheduledForContentDeletion ScheduleAccountContentDelete?


  pinnedPosts PinnedPost[]


  scheduledServerDeletions ScheduleServerDelete[]

  shadowBan ShadowBan?
  shadowBannedUsers ShadowBan[] @relation(name: "shadow_banned_users")

  botCommands BotCommand[]

  externalEmbed ExternalEmbed?

  @@unique([username, tag])

  @@index([tag])
}

model BotCommand {
  @@map("bot_commands")
  id String @id
  
  botUserId String
  botUser User @relation(fields: [botUserId], references: [id], onDelete: Cascade)

  applicationId String
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  
  
  name String
  description String?
  args String?

  @@index([applicationId, name])
  @@index([botUserId, name])
  @@unique([applicationId, name])
}

model UserConnection {
  @@map("user_connections")
  id String @id
  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  public Boolean
  provider String
  refreshToken String
  connectedAt DateTime @default(now())
}

// Used for ip banning.
// In the future, account owners to see whos logged in to your account.
model UserDevice {
  @@map("user_devices")
  id          String    @id
  userId      String
  ipAddress   String

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  lastSeenAt  DateTime @default(now())

  @@index([userId, ipAddress])
  @@unique([userId, ipAddress])

}


model MessageNotification {
  @@map("message_notifications")
  id             String @id
  userId         String

  messageId      String?
  serverId       String?

  user           User     @relation(fields: [userId], references: [id])
  message        Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  server         Server? @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverMember   ServerMember? @relation(fields: [userId, serverId], references: [userId, serverId], onDelete: Cascade)

  createdAt               DateTime                @default(now())

  @@index([messageId, createdAt])
  @@index([userId, createdAt])
}


model UserNotice {
  @@map("user_notices")
  id             String @id

  type           Int

  title          String?

  content        String

  userId         String
  user           User     @relation(fields: [userId], references: [id])



  createdById      String?

  createdBy        User? @relation(fields: [createdById], references: [id], name: "created_notices")


  createdAt               DateTime                @default(now())
}

model UserProfile {
  @@map("user_profiles")
  userId    String   @id
  user      User @relation(fields: [userId], references: [id])
  bio       String?

  bgColorOne String? // used for gradient background color
  bgColorTwo String? // used for gradient background color
  primaryColor String?

}

model Follower {
  @@map("followers")
  id            String   @id
  followedById  String
  followedBy    User     @relation(fields: [followedById], references: [id], name: "following")

  followedToId  String
  followedTo    User     @relation(fields: [followedToId], references: [id])
  @@unique([followedById, followedToId])
  @@index([followedById, followedToId])
  @@index([followedToId])
}


model ShadowBan {
  @@map("shadow_bans")
  id            String   @id
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])

  bannedAt      DateTime @default(now())
  reason        String?

  bannedById      String
  bannedBy      User     @relation(fields: [bannedById], references: [id], name: "shadow_banned_users")
}

model Suspension {
  @@map("suspensions")
  id            String    @id
  suspendedAt   DateTime  @default(now())
  expireAt      DateTime?
  reason        String?
  suspendedById String
  userId        String       @unique
  user          User         @relation(fields: [userId], references: [id])

  userDeleted   Boolean?    @default(false)

  emailHash     String?

  suspendBy     User         @relation(fields: [suspendedById], references: [id], name: "suspended_by")

}

model Server {
  @@map("servers")
  id                     String                  @id
  name                   String
  avatar                 String?
  banner                 String?
  hexColor               String
  defaultChannelId       String
  systemChannelId        String? @unique // Used for system messages eg member joined message. 
  defaultRoleId          String



  systemChannel          Channel?                @relation("systemChannel", fields: [systemChannelId], references: [id], onDelete: SetNull)

  createdById            String

  createdAt              DateTime                @default(now())
  createdBy              User                    @relation("server_creator", fields: [createdById], references: [id])
  channels               Channel[]
  messageMentions        MessageMention[]
  lastSeenChannelMembers ServerChannelLastSeen[]
  invites                ServerInvite[]
  serverMembers          ServerMember[]
  users                  User[]
  roles                  ServerRole[]
  bannedUsers            BannedServerMember[]
  verified               Boolean                @default(false)

  publicServer           PublicServer?

  attachments Attachment[]


  customEmojis CustomEmoji[]

  notificationSettings UserNotificationSettings[]
  memberMessageNotifications         MessageNotification[]

  welcomeQuestions ServerWelcomeQuestion[]

  channelPermissions ServerChannelPermissions[]


  scheduledForDeletion ScheduleServerDelete?


  externalEmbed ExternalEmbed?


    externalServerChannels ExternalServerChannel[]


}

// Personal settings for joined servers
model UserNotificationSettings {
  @@map("user_notification_settings")
  id String @id

  serverId String?
  userId   String

  server   Server? @relation(fields: [serverId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  channelId String?
  channel Channel? @relation(fields: [channelId], references: [id], onDelete: Cascade)

  notificationSoundMode Int?
  notificationPingMode Int? // The red pill alert thing.


  @@unique([userId, serverId])
  @@unique([userId, channelId])
}



model CustomEmoji {
  @@map("custom_emojis")
  id           String  @id
  name         String
  gif          Boolean

  serverId     String
  server       Server  @relation(fields: [serverId], references: [id], onDelete: Cascade)

  uploadedById String 
  uploadedBy   User    @relation(fields: [uploadedById], references: [id], onDelete: Cascade) 

  @@index([serverId])
}


model PublicServer {
  @@map("public_servers")
  id              String    @id
  serverId        String    @unique
  server          Server    @relation(fields: [serverId], references: [id], onDelete: Cascade) 
  description     String

  bumpCount       Int       @default(1)
  bumpedAt        DateTime  @default(now())

  lifetimeBumpCount   Int   @default(1)

  pinnedAt        DateTime?
  createdAt       DateTime   @default(now())
}

model ServerRole {
  @@map("server_roles")
  id                     String                  @id
  name                   String
  icon                   String?

  hexColor               String

  createdById            String
  createdBy              User                    @relation(fields: [createdById], references: [id])

  hideRole               Boolean                 @default(false)

  permissions            Int

  serverId               String
  server                 Server                  @relation(fields: [serverId], references: [id], onDelete: Cascade)
  order                  Int

  botRole     Boolean?

  createdAt              DateTime                @default(now())

  channelPermissions     ServerChannelPermissions[]


  mentionedMessages      Message[]               @relation(name: "role_mentioned_messages")

  @@index([serverId])

}


model ServerWelcomeQuestion {
  @@map("server_welcome_questions")
  id          String   @id
  createdAt   DateTime @default(now())

  title       String
  multiselect Boolean

  answers     ServerWelcomeAnswer[]
  serverId    String
  server      Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  order       Int

  answeredUsers AnsweredServerWelcomeQuestion[]
}

model ServerWelcomeAnswer {
  @@map("server_welcome_answers")
  id          String   @id
  createdAt   DateTime @default(now())

  title       String
  questionId  String
  question    ServerWelcomeQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  roleIds     String[]

  answeredUsers AnsweredServerWelcomeQuestion[]
  order       Int
}

model AnsweredServerWelcomeQuestion {
  @@map("answered_server_welcome_questions")
  id          String   @id
  answeredAt  DateTime @default(now())

  questionId  String
  question    ServerWelcomeQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  answerId    String
  answer      ServerWelcomeAnswer @relation(fields: [answerId], references: [id], onDelete: Cascade)

  memberId      String
  member        ServerMember     @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([memberId, answerId])
}





model ServerInvite {
  @@map("server_invites")
  id          String   @id
  code        String   @unique
  isCustom    Boolean
  uses        Int      @default(0)
  serverId    String
  createdById String
  createdAt   DateTime @default(now())
  createdBy   User     @relation(fields: [createdById], references: [id])
  server      Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)

  externalEmbed ExternalEmbed?

  @@index([serverId])
}

model ServerMember {
  @@map("server_members")
  id       String   @id
  serverId String
  userId   String
  joinedAt DateTime @default(now())
  server   Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])
  nickname String?

  roleIds  String[]

  messageNotifications         MessageNotification[]


  answeredWelcomeQuestions AnsweredServerWelcomeQuestion[]

  @@unique([userId, serverId])
  @@index([serverId])
}


model BannedServerMember {
  @@map("banned_server_members")
  id       String  @id
  userId   String
  serverId String
  server   Server  @relation(fields: [serverId], references: [id], onDelete: Cascade)
  user     User  @relation(fields: [userId], references: [id])
}

model Friend {
  @@map("friends")
  id          String   @id
  status      Int
  userId      String 
  recipientId String
  createdAt   DateTime @default(now())
  recipient   User     @relation("recipient_friends", fields: [recipientId], references: [id])
  user        User     @relation("friends", fields: [userId], references: [id])

  @@unique([userId, recipientId])
}

model Channel {
  @@map("channels")
  id                     String                  @id
  name                   String?
  icon                   String?
  serverId               String?
  createdById            String?
  type                   Int
  slowModeSeconds        Int?
  
  categoryId             String?
  category               Channel?                @relation(fields: [categoryId], references: [id], name: "channel_categories", onDelete: SetNull)


  lastMessagedAt         DateTime?
  createdAt              DateTime                @default(now())
  createdBy              User?                   @relation(fields: [createdById], references: [id])
  server                 Server?                 @relation(fields: [serverId], references: [id], onDelete: SetNull)
  inbox                  Inbox[]
  messages               Message[]
  messageMentions        MessageMention[]
  lastSeenChannelServers ServerChannelLastSeen[]
  attachments            Attachment[]
  order                  Int?

  categories             Channel[] @relation(name: "channel_categories")


  // when this channel is scheduled to delete.
  deleting               Boolean?

  systemChannelServer    Server?  @relation("systemChannel")

  notice ChatNotice?
  ticket Ticket?
  notificationSettings UserNotificationSettings[]

  permissions ServerChannelPermissions[]

  reminders             Reminder[]

  externalServerChannel ExternalServerChannel?
  external Boolean?


  @@index([serverId])

}

model ExternalServerChannel {
  @@map("external_server_channels")
  id          String   @id
  serverId    String
  channelId   String @unique


  server      Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  channel     Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  passwordVersion Int

  createdAt DateTime @default(now())

  @@unique([serverId, channelId])
}

model ServerChannelPermissions {
  @@map("server_channel_permissions")

  permissions     Int?

  roleId String
  role   ServerRole @relation(fields: [roleId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([roleId, channelId])

  @@index([channelId])

}

model Ticket {
  @@map("tickets")
  id          Int   @id @default(autoincrement())
  title       String
  category    Int
  status      Int      @default(2)
  channelId   String   @unique
  channel     Channel  @relation(fields: [channelId], references: [id])

  lastUpdatedAt DateTime @default(now())

  openedById  String
  openedBy    User     @relation(fields: [openedById], references: [id])
  openedAt    DateTime @default(now())
  seen        Boolean? @default(true)
}

model Inbox {
  @@map("inboxes")
  id          String   @id
  createdById String
  recipientId String
  channelId   String
  closed      Boolean
  createdAt   DateTime @default(now())
  channel     Channel  @relation(fields: [channelId], references: [id])
  createdBy   User     @relation("inbox", fields: [createdById], references: [id])
  recipient   User     @relation("recipient_inbox", fields: [recipientId], references: [id])
  lastSeen    DateTime?

  @@unique([createdById, channelId])
}

model Message {
  @@map("messages")
  id          String   @id
  content     String
  type        Int
  channelId   String
  createdById String
  editedAt    DateTime?
  createdAt   DateTime @default(now())
  channel     Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  createdBy   User     @relation(fields: [createdById], references: [id])
  mentions    User[]  @relation(name: "mentioned_messages")
  roleMentions ServerRole[]  @relation(name: "role_mentioned_messages")

  attachments Attachment[]
  reactions   MessageReaction[]

  quotedMessages Message[] @relation(name: "quoted_messages")
  quotedInMessages Message[] @relation(name: "quoted_messages")

  embed Json?
  htmlEmbed String?

  messageNotifications         MessageNotification[]

  replyMessages ReplyMessages[] @relation(name: "reply_messages")
  mentionReplies Boolean?

  replyToMessages ReplyMessages[] @relation(name: "reply_to_messages")

  buttons MessageButton[]

  silent Boolean?


  reminders Reminder[]



  @@index([channelId])
  @@index([createdById])
  @@index([channelId, createdAt])
}


model MessageButton {
  @@map("message_buttons")
  order Int @default(autoincrement())

  messageId String
  
  id     String
  label  String
  alert  Boolean?

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@id([messageId, id])

}

model ReplyMessages {
  @@map("reply_messages")
  id       String @id
  messageId String

  replyToMessageId String?

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade, name: "reply_messages")
  replyToMessage Message? @relation(fields: [replyToMessageId], references: [id], onDelete: SetNull, name: "reply_to_messages")

  @@unique([messageId, replyToMessageId])


  @@index([replyToMessageId, messageId])

}

// When deleting a channel or a server, we will delete 1000 messages every 1 minute
// To not cause strain to the server.
model ScheduleMessageDelete {
  @@map("schedule_message_delete")
  channelId           String   @id
  deletingMessages    Boolean  @default(true)
  deletingAttachments Boolean  @default(true)
  scheduledAt         DateTime @default(now())
}

model ScheduleAccountContentDelete {
  @@map("schedule_account_content_delete")
  userId           String   @unique
  user              User     @relation(fields: [userId], references: [id])
  scheduledAt      DateTime @default(now())

  @@index([userId, scheduledAt])
  @@index([userId])

}

// Only used when Nerimity mod deletes a server.
model ScheduleServerDelete {
  @@map("schedule_server_delete")
  serverId           String   @unique
  server              Server     @relation(fields: [serverId], references: [id], onDelete: Cascade)
  scheduledByUserId   String
  scheduledBy         User @relation(fields: [scheduledByUserId], references: [id])
  scheduledAt       DateTime @default(now())
}

model MessageReaction {
  @@map("message_reactions")
  id  String   @id
  name  String
  emojiId String?
  gif     Boolean?

  reactedUsers ReactedMessageUser[]

  messageId    String
  message      Message @relation(fields: [messageId], references: [id], onDelete: Cascade)


  @@index([messageId])

}

model ReactedMessageUser {
  @@map("reacted_message_users")
  reactionId String
  userId String

  reaction MessageReaction @relation(fields: [reactionId], references: [id], onDelete: Cascade)
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  reactedAt DateTime @default(now())

  @@unique([reactionId, userId])
  @@index([reactionId])
  @@index([userId])
}


model MessageMention {
  @@map("message_mentions")
  id            String   @id
  mentionedById String
  mentionedToId String
  channelId     String
  serverId      String?
  count         Int      @default(0)
  createdAt     DateTime @default(now())
  channel       Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  mentionedBy   User     @relation("sent_message_mentions", fields: [mentionedById], references: [id])
  mentionedTo   User     @relation("message_mentions", fields: [mentionedToId], references: [id])
  server        Server?  @relation(fields: [serverId], references: [id], onDelete: Cascade)


  @@unique([mentionedById, mentionedToId, channelId])
  @@index([mentionedToId])
}

model Attachment {
  @@map("attachments")
  id          String @id
  
  provider    String @default("local")
  fileId     String?
  mime        String?


  path        String?
  width       Int?
  height      Int?
  filesize    Int?

  expireAt    DateTime?  

  messageId   String?
  message     Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)

  postId String?
  post   Post? @relation(fields: [postId], references: [id], onDelete: Cascade)

  channelId String?
  channel   Channel? @relation(fields: [channelId], references: [id], onDelete: Cascade)

  serverId String?
  server   Server? @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())


  @@index([messageId, createdAt])
  @@index([channelId])
  @@index([postId])

}

model ServerChannelLastSeen {
  @@map("server_channel_last_seen")
  id        String   @id
  userId    String
  serverId  String
  channelId String
  lastSeen  DateTime
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  server    Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([channelId, userId, serverId])
  @@index([userId])
}

model AnnouncementPost {
  @@map("announcement_posts")
  postId String @id

  createdAt DateTime @default(now())
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Post {
  @@map("posts")
  id          String   @id
  createdById String
  createdBy   User @relation(fields: [createdById], references: [id])
  content     String?
  createdAt   DateTime @default(now())
  editedAt    DateTime?


  mentions    User[]  @relation(name: "mentioned_posts")


  quotedPostId    String?
  quotedPost      Post? @relation(fields: [quotedPostId], references: [id], name: "quotedPost")
  
  quotes     Post[] @relation(name: "quotedPost")

  likedBy    PostLike[]

  estimateLikes Int @default(0)

  views      Int  @default(0)

  announcement AnnouncementPost?


  estimateReposts Int @default(0)
  repostId String?
  repost   Post? @relation(fields: [repostId], references: [id], name: "repost", onDelete: Cascade) 

  reposts Post[] @relation(name: "repost")

  commentToId  String?
  commentTo  Post? @relation(fields: [commentToId], references: [id], name: "commentTo", onDelete: SetNull)

  comments Post[] @relation(name: "commentTo")
  attachments Attachment[]


  notifications PostNotification[]
  deleted Boolean @default(false)

  poll PostPoll?

  pinned PinnedPost?


  reminders Reminder[]
  embed Json?

  @@index([createdAt(sot: Desc), commentToId, deleted])
  @@index([createdAt(sort: Desc), createdById, commentToId, deleted])
  @@index([commentToId, deleted, createdAt(sort: Desc), createdById])
  @@index([createdById, createdAt(sort: Desc)])
  @@index([commentToId, deleted])
  @@index([estimateLikes(sort: Desc), createdAt])
  @@index([repostId])
  @@index([createdById, deleted, commentToId, createdAt(sort: Desc)])


}

model PinnedPost {
  @@map("pinned_posts")
  postId String @id
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  pinnedById String
  pinnedBy   User @relation(fields: [pinnedById], references: [id])

  pinnedAt DateTime @default(now())

}

model PostPoll {
  @@map("post_polls")
  id          String   @id

  postId String @unique
  post Post @relation(fields: [postId], references: [id])

  choices PostPollChoice[] 
  votedUsers PostPollVotedUser[]
}

model PostPollChoice {
  @@map("post_poll_choices")
  id          String   @id

  pollId String
  poll PostPoll @relation(fields: [pollId], references: [id], onDelete: Cascade)

  content String

  votedUsers PostPollVotedUser[]
}

model PostPollVotedUser {
  @@map("post_poll_voted_users")
  id          String   @id

  pollId String
  poll PostPoll @relation(fields: [pollId], references: [id], onDelete: Cascade)

  pollChoiceId String
  pollChoice PostPollChoice @relation(fields: [pollChoiceId], references: [id], onDelete: Cascade)


  userId      String
  user        User @relation(fields: [userId], references: [id])
}

model PostNotification {
  @@map("post_notifications")
  id          String   @id
  createdAt   DateTime @default(now())
  type        Int

  toId        String
  to          User     @relation(fields: [toId], references: [id], name: "postNotifications", onDelete: Cascade)

  byId        String
  by          User     @relation(fields: [byId], references: [id], onDelete: Cascade)

  postId      String?
  post        Post?     @relation(fields: [postId], references: [id])

  @@index([postId]) 
  @@index([toId, createdAt])

}


model PostLike {
  @@map("post_likes")
  id            String   @id
  
  postId        String
  post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  likedById     String
  likedBy       User @relation(fields: [likedById], references: [id])
  createdAt   DateTime @default(now())

  @@index([postId])
  @@index([likedById])

  @@unique([postId, likedById])
}

model ChatNotice {
  @@map("chat_notices")
  id          String   @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  // For server channels
  channelId   String? @unique
  channel     Channel? @relation(fields: [channelId], references: [id], onDelete: Cascade)

  // For dms
  userId      String? @unique
  user        User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  content     String
}


model ModAuditLog {
  @@map("mod_audit_logs")
  id          String   @id
  createdAt   DateTime @default(now())

  actionById   String
  actionBy     User     @relation(fields: [actionById], references: [id])
  actionType   Int



  serverName   String? 
  serverId     String?

  channelId    String?
  channelName  String?

  userId       String?
  username     String?
  
  count        Int?
  reason       String?
  expireAt     DateTime?
}


model AuditLog {
  @@map("audit_logs")
  id          String   @id
  createdAt   DateTime @default(now())
  actionType   String

  actionById   String

  serverId     String?

  data         Json?

  @@index([actionById, createdAt])
  @@index([serverId, createdAt])
}


model Reminder {
  @@map("reminders")
  id          String   @id
  createdAt   DateTime @default(now())

  remindAt    DateTime
  createdById      String
  createdBy        User     @relation(fields: [createdById], references: [id], onDelete: Cascade)

  postId      String?
  post        Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)

  messageId String?
  message    Message? @relation(fields: [messageId], references: [id], onDelete: SetNull)

  channelId String?
  channel   Channel? @relation(fields: [channelId], references: [id], onDelete: SetNull)

}

model ExternalEmbed {
  @@map("external_embeds")
  id          String   @id

  type        Int

  serverId String? @unique
  server   Server? @relation(fields: [serverId], references: [id], onDelete: Cascade)

  serverInviteCode String? @unique
  serverInvite ServerInvite? @relation(fields: [serverInviteCode], references: [code], onDelete: SetNull)

  userId String? @unique
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}